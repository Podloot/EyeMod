package com.podloot.eyemod.gui.apps;

import java.util.ArrayList;
import java.util.List;

import com.podloot.eyemod.gui.GuiDevice;
import com.podloot.eyemod.gui.panes.Pane;
import com.podloot.eyemod.lib.gui.panels.EyePanel;
import com.podloot.eyemod.lib.gui.util.Image;
import com.podloot.eyemod.lib.gui.util.Line;
import com.podloot.eyemod.lib.gui.widgets.EyeButton;
import com.podloot.eyemod.lib.gui.widgets.EyeWidget;

import net.minecraft.resources.ResourceLocation;

public abstract class App extends EyePanel {
	
	protected GuiDevice device;
	private ResourceLocation id;
	private String creator;
	
	//App settings
	int price = 0;
	int access = 0;
	public Image appIcon;
	public int appColor = 0xffCECECE;
	boolean isStock = false;
	boolean useNet = false;
	boolean useLocation = false;
	boolean isOP = false;
	boolean hasData = false;
	
	List<Pane> panes = new ArrayList<Pane>();
	
	
	private boolean loaded = false;
	private int refresh = -1;
	
	/** Whether the app should reset when opened */
	public boolean reset = true;
	
	public App(ResourceLocation icon, int color, String creator) {
		super(0, 0);
		appIcon = new Image(icon, 32, 32);
		this.appColor = color;
		this.creator = creator;
	}
	
	/**
	 * Set the default price, in case app isn't included in config file
	 * @param price default price (in currency)
	 * @param access access level; 0=Everyone, 1=SP/OPs, 2=None
	 * @return this
	 */
	public App setDefault(int price, int access) {
		this.price = price;
		this.access = access;
		return this;
	}
	
	/**
	 * Use this to make the app installed by default on a new EyePhone. Does not show up in EyeStore when enabled.
	 * @return
	 */
	public App setStock() {
		isStock = true;
		return this;
	}
	
	/**
	 * Use this if the app requires a EyeNet connection to work
	 * @return this
	 */
	public App setNet() {
		useNet = true;
		return this;
	}
	
	/**
	 * Use this if the app requires access to your location
	 * @return this
	 */
	public App setLocation() {
		useLocation = true;
		return this;
	}
	
	public App useData() {
		hasData = true;
		return this;
	}
	
	/**
	 * Use this if the app can be considered overpowered (used for the gamerule EyeDisableOP)
	 * @return this
	 */
	public App setOp() {
		isOP = true;
		return this;
	}
	
	/**
	 * Creates the app whenever the GuiDevice is opened
	 * @param device
	 */
	public void set(GuiDevice device, int price, int access) {
		this.device = device;
		this.price = price;
		this.access = access;
		setup();
	}
	
	/**
	 * Called whenever the set() function is called, when the device is opened (and not the app)
	 */
	public void setup() {}
	
	public void open() {
		this.closePanes();
		if(device == null) return; //Cannot open when app is not initialized by GuiDevice
		if(reset) clear();
		if(!loaded) loaded = load();
	}
	
	/**
	 * Used to create all items.
	 * @return true by default, false if something went wrong
	 */
	public abstract boolean load();
	
	@Override
	public void clear() {
		this.closePanes();
		this.loaded = false;
		super.clear();
	}
	
	/**
	 * Gets called everytime the panel gets removed from the GUI. 
	 * Make sure to keep the super.close() to close every included widget
	 */
	public void close() {
		super.close();
	}
	
	/**
	 * Gets called a short while after you called refresh() to give time for the server response
	 */
	public void onRefresh() {
		this.clear();
		this.load();
	}
	
	/**
	 * Use this to update the app whenever you want to update items (e.g. nbt related) that is not updated in the same cycle.
	 * Calls onRefresh() on the cycle after the wait time has passed.
	 */
	public void refresh() {
		refresh = 8;
	}
	
	public void onHomeGeneral() {
		if(!panes.isEmpty()) {
			closePane(panes.get(panes.size()-1));
		} else {
			onHome();
		}
	}
	
	/**
	 * Gets called whenever home button is pressed
	 */
	public void onHome() {
		device.openHome();
	}
	
	/**
	 * Gets called whenever < is pressed
	 */
	public void onLeft() {}
	
	/**
	 * Gets called whenever > is pressed
	 */
	public void onRight() {}
	
	@Override
	public void tick(int mx, int my) {
		if(refresh > 0) {
			if(refresh == 1) this.onRefresh();
			refresh--;
		}
		super.tick(mx, my);
	}
	
	/**
	 * Used to add settings for this app
	 * @return list of settings
	 */
	public List<EyeWidget> getSettings(int width) {
		return null;
	}
	
	/**
	 * Used to clear any data generated by this App
	 */
	public void onClearData() {}
	
	/**
	 * Create a notification panel that will be shown on the start screen, overwrite to change
	 * @return notification panel
	 */
	public EyeWidget getNotification(String message, int width) {
		EyeButton msg = new EyeButton(width, 16);
		msg.setText(new Line(message));
		msg.setColor(getAppColor());
		msg.setAction(() -> {
			if(device != null) {
				if(!device.isLocked()) {
					device.openApp(this);
				}
			}
		});
		return msg;
	}
	
	public void openPane(Pane pane) {
		pane.setBack(0xff444444);
		panes.add(pane);
		add(pane, getWidth()/2 - pane.getWidth()/2, getHeight()/2 - pane.getHeight()/2);
	}
	
	public void closePane(Pane pane) {
		if(panes.contains(pane)) {
			panes.remove(pane);
			this.remove(pane);
		}
	}
	
	public void closePanes() {
		List<Pane> remove = new ArrayList<Pane>();
		for(Pane p : panes) {
			p.close();
			this.remove(p);
			remove.add(p);
		}
		panes.removeAll(remove);
	}
	
	public int getPrice() {
		return price;
	}
	
	public int getAccess() {
		return access;
	}
	
	public boolean isStock() {
		return isStock;
	}
	
	public boolean isOP() {
		return isOP;
	}
	
	public boolean hasData() {
		return hasData;
	}
	
	public boolean useNet() {
		return this.useNet;
	}
	
	public boolean useLocation() {
		return this.useLocation;
	}
	
	public Line getName() {
		return new Line("app." + getId().getNamespace() + "." + getId().getPath() + ".name");
	}
	
	public Line getDescription() {
		return new Line("app." + getId().getNamespace() + "." + getId().getPath() + ".desc");
	}

	public int getAppColor() {
		return appColor;
	}

	public String getCreator() {
		return creator;
	}

	public ResourceLocation getId() {
		return id;
	}

	public void setId(ResourceLocation id) {
		this.id = id;
	}

	public GuiDevice getDevice() {
		return device;
	}

	
}
